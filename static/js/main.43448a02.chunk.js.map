{"version":3,"sources":["components/card/my-card.component.jsx","components/card-list/card-list.component.jsx","components/serch-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MyCard","props","className","Card","Img","variant","src","monster","id","Body","Title","name","Text","Footer","email","CardList","console","log","CardDeck","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","printState","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Container","Row","Col","lg","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0WAiCeA,EApBA,SAACC,GACd,OACE,yBAAKC,UAAU,WACb,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CACEC,QAAQ,MACRC,IAAG,+BAA0BL,EAAMM,QAAQC,GAAxC,4BAEL,kBAACL,EAAA,EAAKM,KAAN,KACE,kBAACN,EAAA,EAAKO,MAAN,KAAaT,EAAMM,QAAQI,MAC3B,kBAACR,EAAA,EAAKS,KAAN,8CAEF,kBAACT,EAAA,EAAKU,OAAN,KACE,2BAAOX,UAAU,cAAcD,EAAMM,QAAQO,W,eCNxCC,EAXE,SAACd,GAEhB,OADAe,QAAQC,IAAIhB,GAEV,kBAACiB,EAAA,EAAD,CAAUhB,UAAU,aACjBD,EAAMkB,SAASC,KAAI,SAACb,GAAD,OAClB,kBAAC,EAAD,CAAQc,IAAKd,EAAQC,GAAID,QAASA,SCA3Be,G,kBAXG,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAC/B,OACE,2BACEtB,UAAU,SACVuB,KAAK,SACLF,YAAaA,EACbG,SAAUF,M,wBCmDDG,E,kDAjDb,aAAe,IAAD,8BACZ,gBAqBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,OAAS,EAAKC,aArBpD,EAAKC,MAAQ,CACXf,SAAU,GACVW,YAAa,IAJH,E,gEAYO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEV,SAAUoB,S,+BAWrC,IAAD,EAC2BC,KAAKN,MAA/Bf,EADD,EACCA,SAAUW,EADX,EACWA,YACZW,EAAmBtB,EAASuB,QAAO,SAACnC,GAAD,OACvCA,EAAQI,KAAKgC,cAAcC,SAASd,EAAYa,kBAElD,OACE,kBAACE,EAAA,EAAD,CAAW3C,UAAU,OACnB,gDACA,kBAAC,EAAD,CACEqB,YAAY,kBACZC,aAAcgB,KAAKhB,eAGrB,kBAACsB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,IACP,kBAAC,EAAD,CAAU7B,SAAUsB,W,GA1CdQ,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.43448a02.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.styles.css\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\n/* <div className=\"card card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      />\r\n      <h2>{props.monster.name}</h2>\r\n      <p> {props.monster.email}</p>\r\n    </div> */\r\n\r\nconst MyCard = (props) => {\r\n  return (\r\n    <div className=\"my-card\">\r\n      <Card>\r\n        <Card.Img\r\n          variant=\"top\"\r\n          src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n        />\r\n        <Card.Body>\r\n          <Card.Title>{props.monster.name}</Card.Title>\r\n          <Card.Text>This content is a little bit longer.</Card.Text>\r\n        </Card.Body>\r\n        <Card.Footer>\r\n          <small className=\"text-muted\">{props.monster.email}</small>\r\n        </Card.Footer>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyCard;\r\n","import React from \"react\";\r\nimport MyCard from \"../card/my-card.component\";\r\nimport \"./card-list.stayles.css\";\r\n/* import Card from 'react-bootstrap/Card'; */\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\n\r\n/* <div className=\"card-list\"> */\r\n/*  <Card key={monster.id} monster={monster} /> */\r\n\r\nconst CardList = (props) => {\r\n  console.log(props);\r\n  return (\r\n    <CardDeck className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <MyCard key={monster.id} monster={monster} />\r\n      ))}\r\n    </CardDeck>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./search-box.stayles.css\";\r\n\r\nconst SearchBox = ({placeholder, handleChange}) => {\r\n  return (\r\n    <input\r\n      className=\"search\"\r\n      type=\"search\"\r\n      placeholder={placeholder}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport SearchBox from \"./components/serch-box/search-box.component\";\nimport Container from \"react-bootstrap/Container\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n\n    //Ovaj di koda ne treba kao koristimo sintaksu: handleChange = (e) => {}\n    //Ali ako koristimo sintaksu bez strelice onda ova linija ispod treba: handleChange(e){}\n    /* this.handleChange = this.handleChange.bind(this); */\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n /*  printState = () => {\n    console.log(\"PrintState \", this.state);\n  }; */\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value }, this.printState);\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <Container className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n\n        <Row>\n          <Col lg={16}>\n            <CardList monsters={filteredMonsters}></CardList>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}